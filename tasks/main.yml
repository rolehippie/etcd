# Standards: 0.1
---
- name: Install required packages
  with_items:
    - etcd
  package:
    name: "{{ item }}"
    state: present
  tags:
    - etcd

- name: Write profile script
  template:
    src: profile.j2
    dest: /etc/profile.d/etcdctl.sh
  tags:
    - etcd

- name: Create pki dir
  file:
    path: /etc/etcd/pki
    state: directory
  tags:
    - etcd

- name: Write peer CA
  notify:
    - Restart etcd
  copy:
    content: "{{ etcd_peer_ca_cert }}"
    dest: /etc/etcd/pki/peer-ca.crt
    mode: u=rw,g=,o=
  tags:
    - etcd

- name: Check peer cert
  stat:
    path: /etc/etcd/pki/peer.crt
  register: peer_cert_result
  tags:
    - etcd

- name: Peer CA json
  when: (peer_cert_result.stat is defined and not peer_cert_result.stat.exists) or etcd_peer_cert_overwrite
  copy:
    content: "{{ etcd_peer_ca_config | to_json }}"
    dest: /etc/etcd/pki/ca.json
    mode: u=rw,g=,o=
  tags:
    - etcd

- name: Peer CA key
  when: (peer_cert_result.stat is defined and not peer_cert_result.stat.exists) or etcd_peer_cert_overwrite
  copy:
    content: "{{ etcd_peer_ca_key }}"
    dest: /etc/etcd/pki/ca.key
    mode: u=rw,g=,o=
  tags:
    - etcd

- name: Peer cert json
  when: (peer_cert_result.stat is defined and not peer_cert_result.stat.exists) or etcd_peer_cert_overwrite
  copy:
    content: "{{ etcd_peer_config | to_json }}"
    dest: /etc/etcd/pki/peer.json
    mode: u=rw,g=,o=
  tags:
    - etcd

- name: Generate peer cert
  when: (peer_cert_result.stat is defined and not peer_cert_result.stat.exists) or etcd_peer_cert_overwrite
  command: cfssl gencert -config=/etc/etcd/pki/ca.json -ca=/etc/etcd/pki/peer-ca.crt -ca-key=/etc/etcd/pki/ca.key /etc/etcd/pki/peer.json
  register: generated_peer_cert
  tags:
    - etcd

- name: Parse peer cert
  when: (peer_cert_result.stat is defined and not peer_cert_result.stat.exists) or etcd_peer_cert_overwrite
  set_fact:
    etcd_generated_peer_cert: "{{ generated_peer_cert.stdout | from_json }}"
  tags:
    - etcd

- name: Write peer cert
  when: (peer_cert_result.stat is defined and not peer_cert_result.stat.exists) or etcd_peer_cert_overwrite
  notify:
    - Restart etcd
  copy:
    content: "{{ etcd_generated_peer_cert.cert }}"
    dest: /etc/etcd/pki/peer.crt
    mode: u=rw,g=,o=
  tags:
    - etcd

- name: Write peer key
  when: (peer_cert_result.stat is defined and not peer_cert_result.stat.exists) or etcd_peer_cert_overwrite
  notify:
    - Restart etcd
  copy:
    content: "{{ etcd_generated_peer_cert.key }}"
    dest: /etc/etcd/pki/peer.key
    mode: u=rw,g=,o=
  tags:
    - etcd

- name: Delete peer artifacts
  when: (peer_cert_result.stat is defined and not peer_cert_result.stat.exists) or etcd_peer_cert_overwrite
  with_items:
    - /etc/etcd/pki/ca.json
    - /etc/etcd/pki/ca.key
    - /etc/etcd/pki/peer.json
  file:
    path: "{{ item }}"
    state: absent
  tags:
    - etcd

- name: Write client CA
  notify:
    - Restart etcd
  copy:
    content: "{{ etcd_client_ca_cert }}"
    dest: /etc/etcd/pki/client-ca.crt
    mode: u=rw,g=,o=
  tags:
    - etcd

- name: Check client cert
  stat:
    path: /etc/etcd/pki/client.crt
  register: client_cert_result
  tags:
    - etcd

- name: Client CA json
  when: (client_cert_result.stat is defined and not client_cert_result.stat.exists) or etcd_client_cert_overwrite
  copy:
    content: "{{ etcd_client_ca_config | to_json }}"
    dest: /etc/etcd/pki/ca.json
    mode: u=rw,g=,o=
  tags:
    - etcd

- name: Client CA key
  when: (client_cert_result.stat is defined and not client_cert_result.stat.exists) or etcd_client_cert_overwrite
  copy:
    content: "{{ etcd_client_ca_key }}"
    dest: /etc/etcd/pki/ca.key
    mode: u=rw,g=,o=
  tags:
    - etcd

- name: Client cert json
  when: (client_cert_result.stat is defined and not client_cert_result.stat.exists) or etcd_client_cert_overwrite
  copy:
    content: "{{ etcd_client_config | to_json }}"
    dest: /etc/etcd/pki/client.json
    mode: u=rw,g=,o=
  tags:
    - etcd

- name: Generate client cert
  when: (client_cert_result.stat is defined and not client_cert_result.stat.exists) or etcd_client_cert_overwrite
  command: cfssl gencert -config=/etc/etcd/pki/ca.json -ca=/etc/etcd/pki/client-ca.crt -ca-key=/etc/etcd/pki/ca.key /etc/etcd/pki/client.json
  register: generated_client_cert
  tags:
    - etcd

- name: Parse client cert
  when: (client_cert_result.stat is defined and not client_cert_result.stat.exists) or etcd_client_cert_overwrite
  set_fact:
    etcd_generated_client_cert: "{{ generated_client_cert.stdout | from_json }}"
  tags:
    - etcd

- name: Write client cert
  when: (client_cert_result.stat is defined and not client_cert_result.stat.exists) or etcd_client_cert_overwrite
  notify:
    - Restart etcd
  copy:
    content: "{{ etcd_generated_client_cert.cert }}"
    dest: /etc/etcd/pki/client.crt
    mode: u=rw,g=,o=
  tags:
    - etcd

- name: Write client key
  when: (client_cert_result.stat is defined and not client_cert_result.stat.exists) or etcd_client_cert_overwrite
  notify:
    - Restart etcd
  copy:
    content: "{{ etcd_generated_client_cert.key }}"
    dest: /etc/etcd/pki/client.key
    mode: u=rw,g=,o=
  tags:
    - etcd

- name: Delete client artifacts
  when: (client_cert_result.stat is defined and not client_cert_result.stat.exists) or etcd_client_cert_overwrite
  with_items:
    - /etc/etcd/pki/ca.json
    - /etc/etcd/pki/ca.key
    - /etc/etcd/pki/client.json
  file:
    path: "{{ item }}"
    state: absent
  tags:
    - etcd

- name: Write env config
  notify:
    - Restart etcd
  template:
    src: default.j2
    dest: /etc/default/etcd
  tags:
    - etcd

- name: Write service file
  notify:
    - Restart etcd
  template:
    src: service.j2
    dest: /etc/systemd/system/etcd.service
  tags:
    - etcd

- name: Start etcd service
  systemd:
    name: etcd
    state: started
    daemon_reload: True
    masked: False
    enabled: True
  tags:
    - etcd

...
